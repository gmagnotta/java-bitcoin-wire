package org.gmagnotta.bitcoin.wire.serializer;
import java.math.BigInteger;
import java.net.InetAddress;

import org.gmagnotta.bitcoin.message.impl.BitcoinAddrMessage;
import org.gmagnotta.bitcoin.message.impl.BitcoinGetDataMessage;
import org.gmagnotta.bitcoin.message.impl.BitcoinGetHeadersMessage;
import org.gmagnotta.bitcoin.message.impl.BitcoinHeadersMessage;
import org.gmagnotta.bitcoin.message.impl.BitcoinInvMessage;
import org.gmagnotta.bitcoin.message.impl.BitcoinPingMessage;
import org.gmagnotta.bitcoin.message.impl.BitcoinPongMessage;
import org.gmagnotta.bitcoin.message.impl.BitcoinVersionMessage;
import org.gmagnotta.bitcoin.message.impl.InventoryVector;
import org.gmagnotta.bitcoin.message.impl.InventoryVector.Type;
import org.gmagnotta.bitcoin.message.impl.NetworkAddress;
import org.gmagnotta.bitcoin.utils.Sha256Hash;
import org.gmagnotta.bitcoin.wire.BitcoinCommand;
import org.gmagnotta.bitcoin.wire.BitcoinFrame;
import org.gmagnotta.bitcoin.wire.MagicVersion;
import org.junit.Assert;
import org.junit.Test;
import org.spongycastle.util.encoders.Hex;

public class BitcoinFrameTest {
	
	private static byte[] version;
	private static byte[] verack;
	private static byte[] ping;
	private static byte[] pong;
	private static byte[] getAddr;
	private static byte[] addr;
	private static byte[] inv;
	private static byte[] getHeaders;
	private static byte[] headers;
	private static byte[] getData;
	private static byte[] block;
	
	static {
		version = Hex.decode("fabfb5da76657273696f6e000000000073000000078454dc711101000000000000000000ddf3ed5900000000000000000000000000000000000000000000ffff7f0000014a38000000000000000000000000000000000000ffff7f0000014a3800000000000000001d2f626974636f696e6a3a302e31342e352f554e49515549443a302e312f0000000001");
		verack = Hex.decode("fabfb5da76657261636b000000000000000000005df6e0e2");
		ping = Hex.decode("fabfb5da70696e670000000000000000080000007ff7de1902246433af0feb3c");
		pong = Hex.decode("fabfb5da706f6e670000000000000000080000007ff7de1902246433af0feb3c");
		getAddr = Hex.decode("fabfb5da676574616464720000000000000000005df6e0e2");
		addr = Hex.decode("fabfb5da6164647200000000000000001f0000007070d6a201eaae275a0d0000000000000000000000000000000000ffff34f32409479d");
		inv = Hex.decode("fabfb5da696e7600000000000000000025000000582f6f8c010100000060a310a6de373d91449f0c373908ab871db3cec38087b4c2474629c8795988df");
		getHeaders = Hex.decode("fabfb5da67657468656164657273000025040000ea3e084b7c11010020d9624dab5a36d2441df2ab125d5d89f507d6f3ca6be12faf01ee62db000000000748af8916926b4a0cb18871bc2a0f0c29e0c90abec79494eb04000000000000916109d1e39f5e027dd729fbdf881ddf1c3200bad45f05fcae0b000000000000eaf697ce87063d16996e98c14cf5983ebdd901ffb0bcda3c3d0a00000000000083657e9e06aa4d01e58f437128b3df57e377f7f9ea50f51a250c000000000000397a0e03481b958f8f6b0580a0ca8a62a450a7e04d7fb2c30802000000000000867f027653075754f852303edfd9e617c045ce6cfc4f00dea200000000000000f0c7c361765d3c8b2a9f9be9dc62d68d77decf771cfd25ffb40200000000000066f985b5e50f404a54d4c9f4a0fc79f64997348ffc298d7bde06000000000000e783418b4327e0f659a2b1a7b43867ef2321887291ab8372ee0e000000000000b59f59b78c73093bb35cd500a93c2dca547cd31a0918a2ca5e050000000000002f2d3dc67e3fdcf1f2bbeb9f780f13b8f352e530c6597831500e000000000000d4146993ccbf2c4299f6f29a3e7344816e567cc5f0781da5e006000000000000ae37166ec1f9a62a5e532962a547974743f52a0d869f85070c020000000000007df096614ae4ad71e1917cb8961ebf079521a2e36fbb8be3c70000000000000040a22b0865151e0bd0df83aa88dbb5dc82227552e4d7ef6d6f0a0000000000001dae903157326a6013494d3e2a0ad027619bbf71b8588e59a10f000000000000bd48c0ad5c73a83c15f9a86f623480ebdcfc97a15e178fc56c0f000000000000cffc7eebc4cf92e1ba67bdbeb6fb849fbfea08c1c10a5ffe5f0f00000000000004e512fd86222fbfe0b97ffb46ddb7ed30868ce800a9c11ad4070000000000004050fc6df3c49fa7f0f21c53c372302874cba43906729a5d650b0000000000006782e12e50539efc8b3d138fa5a78650d76c4029ece5655776330000000000001ce0af0be46e3374ae292b9f7b8707b2887471d7712b2f769d08000000000000f8a9c9b1efdfc0649d972479f2431098d16a60e13d4d250eca050200000000006bece9087e5045832e9f0de5d2534c929056fdd7cfdacb7c3289b90a0000000084e31413a04de0e6a0e6ba1434917743dbb36a7ad0eee468d3b46c00000000000c346a533b18d025f9d7946e549f353492f4454583cfa416079539030000000061f716c16875e50fe6aa8e2b1a1e77f26995fd74c68fbfe33401000000000000305b825f685b86ed2f11d9a93402f453a4c32f046f8296d342884b0000000000fd59259d5a4837587550ac3adb23389e6d80f6f31070b33f1ab00c5400000000bfb57ba9548e96c060610f99b6eb79f907f907258f5c91c459cb95820000000043497fd7f826957108f4a30fd9cec3aeba79972084e90ead01ea3309000000000000000000000000000000000000000000000000000000000000000000000000");
		headers = Hex.decode("fabfb5da686561646572730000000000a30000002e5cce1f020100000043497fd7f826957108f4a30fd9cec3aeba79972084e90ead01ea330900000000bac8b0fa927c0ac8234287e33c5f74d38d354820e24756ad709d7038fc5f31f020e7494dffff001d03e4b672000100000006128e87be8b1b4dea47a7247d5528d2702c96826c7a648497e773b800000000e241352e3bec0a95a6217e10c3abb54adfa05abb12c126695595580fb92e222032e7494dffff001d00d2353400");
		getData = Hex.decode("fabfb5da6765746461746100000000004900000068f748970202000000a04d2ba2f0ae1eeefade9f6f47fcd1ddd02b36695cfe631cb708e5306acc9916020000001007ef8ed319b35dc1876c9b3087e2390546aceeffd97972bb33184429d17e22");
	//block = Hex.decode("f9beb4d9626c6f636b00000000000000aaaaaaaabbbbbbbb01000000 6fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d6190000000000 982051fd1e4ba744bbbe680e1fee14677ba1a3c3540bf7b1cdb606e857233e0e 61bc6649 ffff001d 01e36299 03 01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff2203aac0070004a9ba7a5a04acdb581d08bd0d625a370000d3092f426974667572792fffffffff02c9e6b14b000000001976a914fd7c391b253a473d847a48f1fe689c3552ceb33d88ac0000000000000000266a24aa21a9edecb7372e1046603ad16e94f0651ce3cd89c8cab106543df200740926d9700e4600000000010000000188c0a951754b8d6c1fe5350e6fa991df4818f2e5849ea472df16932cc5aefa4d0200000000ffffffff0200286bee000000001976a91449f2a3e7873c7b5e37fb92603ff3a0733bb4d0e688ac2083 010000000188c0a951754b8d6c1fe5350e6fa991df4818f2e5849ea472df16932cc5aefa4d0200000000ffffffff0200286bee000000001976a91449f2a3e7873c7b5e37fb92603ff3a0733bb4d0e688ac20830c0000000000220020701a8d401c84fb13e6baf169d59684e17abd9fa216c8cc5b9fc63d622ff8c58d000000000200000011624d2ac61a5fb350055d0e4520a0af7083385a2874eaab4052297904df1f3a2d140000006b483045022100bdb51b888ff4ae44371e0788c6c1f3fb5db627cd7869f37c9f5b827708e74025022042f6c966f342ec1abadcc44a3a932e1a85b510c523b3c2350b17f0fe50424f29012103d87fc1f25335d077791f97888bdd18cbd2d12f9037383471c92fcb80a3bf4eb6feffffff1d98762a30ec8df56797b2f8b6ff67009ae500c322bf00ca94296f16095ded92010000006a47304402203947c6580071845b5a4b409aef5345d2fc417522be8a5fed4db0fc8e4ba7f60902204d1df9f8382db8edb54b71ed34e89e392247811e 0200000011624d2ac61a5fb350055d0e4520a0af7083385a2874eaab4052297904df1f3a2d140000006b483045022100bdb51b888ff4ae44371e0788c6c1f3fb5db627cd7869f37c9f5b827708e74025022042f6c966f342ec1abadcc44a3a932e1a85b510c523b3c2350b17f0fe50424f29012103d87fc1f25335d077791f97888bdd18cbd2d12f9037383471c92fcb80a3bf4eb6feffffff1d98762a30ec8df56797b2f8b6ff67009ae500c322bf00ca94296f16095ded92010000006a47304402203947c6580071845b5a4b409aef5345d2fc417522be8a5fed4db0fc8e4ba7f60902204d1df9f8382db8edb54b71ed34e89e392247811e584f2395da6f786037ac518101210208da4f932fdd14b319d41daef3638d15c45db7a134952655abd5e333e829d0a5feffffffaee66d0a3f0ae469ab2350245508cd99a7c2cf4f58d25ff70380651a7151ef27000000006a47304402202440dcf86847e41af5b887e20f2e881a26339c57d8214822911f2fb72bf64fe50220523fc8a6b1005b0a2af48a397738f4490ee9871d3d9f2d4f5e4c7014f58f410e0121026942351b3d3e545a8fb7688d89bcfeeaf7646d4284d3096a82484582a5c24f33feffffffd6ddbba9699a600885c48afb8e9d96bbbc911ca1dc6e1b7f819ae67e070974a3310000006b483045022100e8b84ac7b307f8719a84722b3d2b4aa88cd148d9fd7c14ca244490deaed5042d02200f3eb5d3cffb09d5f5482e44e6b24ff034a7fe4a5382bdc9adbb7af0768fd741012103322fbf454b118ef72e08fe99e23362a87c3f58f4b681bdaa263daafc71b5dcdefeffffffa034e9b1724c7c96dd35b7ad8d9eff488969788f318ae1efa263a661e3691905030000006a473044022053c0f41ee5f1a6288ca7abf233932a7219afda09670a771e53daf26eae7cefd902204fd8cb1ce3ecc9b97bd96c2d4d879678bcaae8da922d48796a90f9f7e82e19fd01210334b85bab5fabed94f78b2292528885ce2bc5db2413f2ac86b5a876f41bebc65afeffffff67016aaf9015e22748c959df7b0946564b0a0295e92057305c33335f572bf371000000006b4830450221008f6b55e6f70b4aa6d65cc4ac69851ca9d9f26e7163d72eb99b89e2318e59addb02207d8ddda953c0c47a26c8dcfd0b83752d26d22cd52a9d0b76567c8792501b56d0012103da410ea4d66569240cf5e1dd9c7b7e5112cb62be2da8f49897bbc59acc99518efeffffff6b23b0342ccd5d355d3d5afc096402056048e62c6ed99c98df3197d3ccb6ea8f000000006b483045022100b484779cf8bab806b64a0b5506cefdbd6878d073b857cbb9b1f30e3fcbe467e102203f3afde361511396bd0e4c88b9cae67d3de53ef63c65284528300954299d108e0121036a7776dc183ba2ee329bb91b4222c0ae18394dc81346253679c6021208cf0460feffffff43d65aa4060591c7a93499f159d1acf4487c54670c51f64785b448a92d81d50e010000006b483045022100a2db969235ee3ff48944e2c2f5a3e3d70ce449aff57cc6b103c89392112eaf5702202f9a5eb5da4cba386a990b227ed153345944d1c23faba53c2b6f779f329a8cd601210224b89d2dfb324a240d33ad04491626e8d505c3bd27ae8927c5f5127958e80003feffffffc072a21159510d0e66ce77ac81075a20a5ed0940ab68de084f5d5925128527df2f0000006a4730440220745fe01fa4043c754cad5848ac9895aeb7750a1b716aa5389e49a9eecb41cad502206b36e22f281737a33610891596a2c02d5cf3ce7c9c0578c9c92dd871454621ed012102d4db616c07d94755e7d90d51c6350ba22186e9ba2de1fba50480311e310a06a7feffffff884f7da81d2c88724482cbbeb5bd6ce3eee3084c88f27cd8169268b14777d6d6070000006b483045022100a63a36a57c47c3e3447a765bdafb114cfcc99a7c81b4990eba24b83bb6f92daf022023844de984f6582cd2ad46d58e256210f00957f8aca61f615e2ef2bc476be82b0121027d98d52cd1ace8afbe520058f558d26135f4ace96239a5c87b28d72943530d2dfeffffff32c3327a9e06ee5a447c9d50b2ea38a3c9d85c296713cfaac9f7ac1d7a0051b21d0000006a473044022032f30ded5ba6c5bd47e44de482071e1e892324e5efa9cf02c431b2714caa837702206504a7392cdf2b86fd829c3129f0e8a99f904f1a10b59f6612f1755411ccbdd40121031cfde82317b2eca72c89bc2b7955e261328b529339fd29040fed217e08dd562bfeffffffa0aaac50a1088ba2c6740b5f63a192150a4e06ad9d4a88156612acff967c5793040000006a47304402200fe65f5cec04d51e9d426e62b3caf6aa51494f60977dba6e08de7fc1b9d923c102202fafe3ae9c5e55dfe0658e0465659bead28212a72bd6987a90cd5e3eb2689e9b0121025dccf78ea20ec75b390a9e0526df8c7f851199f3ad88e67381da09cb6a41b974feffffff245e2d05d4804f46f877a541e2be20cc0ea6383dcd88632ee7b23620bd51b096000000006b483045022100e2e960a39700336e29d8e5236ca308e95ee7ccc3d3bb4712a9b9b644d68d07eb02207a9758b5fb627c15e6cdef98f6b506b21235e7b3ecdd2fb431d0f059fffafeb20121037c18fa148e9bcd22d06e33d7f1ccce422068a6a8c7ee197ad6fe48010cf5e1dcfeffffff50eb324c6f86689356e1fe92a9ced7b3ee7c3c5c35966d5072258b48d3393f98000000006b4830450221009c2174d72b9af54bc29e367b1fd1f52e4c581d4a45016d9dd7de042ad71fee26022067b96e33b37f96f8fb728a74dded6de89fc5dd28807ab1845760bf5ba2d6fcda01210229935c3950897258d87531d909d3f5b9f50ca053e85ab992ccd2845ccac539b1feffffff30e36eae0e9ef668aeef915e3e4a43c50d47f9150f0ed45dbe0fb651d3806d34000000006a47304402203a1e8d3911c5a3e6870e18596ea557d2b8d97ae1f235e957aff5e8e34984e7ad022052d22003e3629878a7d3e0a1d9817adfc6479206b1089604618b75ccc25d29c3012102f92a888c0e8d42bbca1576bc1ce51796acb375557640c8a58c03e30674477faafeffffffd498d817e9a7b7410bb4ea02a4cf571900091301e13204e03b6a6adb68dea3d70d0000006b483045022100c9113520c688dd05ecc2c1760270efd2cbb3d3252feb970f8969b899a22e27b50220363ea6e7adc0665a37d699a7c491370a884644aedc7043c0798191dcaccc2707012102c3e94249625e96f7621ee946c802331d779771eb585f1f6478fcad6c628db58ffeffffffdc2e6e67bff88f3054f3510a9aa58c4faafe8f6680eeb9218b79c90601a5d6a6010000006b48304502210098c36805cfb40cb4c7a8a1fda735acaeecea97d7b3004302e6659415856aae4502201e0f30a97c41e8ae31bf1b2579aff28e8d028d3779a4cf8a17068441435a3897012103249c487d8cd4fefda8ada8c394bf903af1a2720bedb0ab8c81902b7d3c0fc8a8feffffff02cde71b00000000001976a914f2763fe4b734fb9340deeed63801940364b96a1a88ace0f8ef18000000001976a9147cdd192406ccc34b305419041a2f9fbc2c6f979688aca9c007000100000002e24e297a5e25c65b9d4af3cacbeb14ae464ffbb827a51dd7b6c9feb67d13e5b6080000006b483045022100fd7fc2d5ce60e3af937ae9265dd7f9df323fa59e8d9684a14b87453102b2390f022043cf3bff1e8cfbe4a14a4b047edd076acb6074bc75219f05699614f6e56d3b84012102db24cf1edcb55a224725ed52d00c305d072b8d543a114e60a15a2f5e615333fbffffffff3f8528132e28f5f266570cefa667ed30ce9e5d550839ae3680714a0f46df81f3010000006b483045022100a60ebbed9dd3a06469ce19ebab30497251cbf9d7ef5c880fedba0297f814edf502203fa2af45f0e8cba63dc2232995263b455722e86f96191d4a1da414c70616d021012102b1e5df07522c609866c468731261225b5241556a5e635c8640c6532dacbc54e8ffffffff0187287f010000000017a91473bbe5580daed52c819362da60d0332b97e1945587000000000100000001ee7332adcb7f3f18307c8d5b7c9aa3b3ab3cd64300a7d7e2c88e1d191ab97e6b0100");
		block = Hex.decode("f9beb4d9626c6f636b000000000000005e0d00005d8ee120010000006fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d6190000000000982051fd1e4ba744bbbe680e1fee14677ba1a3c3540bf7b1cdb606e857233e0e61bc6649ffff001d01e3629902010000000188c0a951754b8d6c1fe5350e6fa991df4818f2e5849ea472df16932cc5aefa4d0200000000ffffffff0200286bee000000001976a91449f2a3e7873c7b5e37fb92603ff3a0733bb4d0e688ac20830c0000000000220020701a8d401c84fb13e6baf169d59684e17abd9fa216c8cc5b9fc63d622ff8c58d000000000200000011624d2ac61a5fb350055d0e4520a0af7083385a2874eaab4052297904df1f3a2d140000006b483045022100bdb51b888ff4ae44371e0788c6c1f3fb5db627cd7869f37c9f5b827708e74025022042f6c966f342ec1abadcc44a3a932e1a85b510c523b3c2350b17f0fe50424f29012103d87fc1f25335d077791f97888bdd18cbd2d12f9037383471c92fcb80a3bf4eb6feffffff1d98762a30ec8df56797b2f8b6ff67009ae500c322bf00ca94296f16095ded92010000006a47304402203947c6580071845b5a4b409aef5345d2fc417522be8a5fed4db0fc8e4ba7f60902204d1df9f8382db8edb54b71ed34e89e392247811e0200000011624d2ac61a5fb350055d0e4520a0af7083385a2874eaab4052297904df1f3a2d140000006b483045022100bdb51b888ff4ae44371e0788c6c1f3fb5db627cd7869f37c9f5b827708e74025022042f6c966f342ec1abadcc44a3a932e1a85b510c523b3c2350b17f0fe50424f29012103d87fc1f25335d077791f97888bdd18cbd2d12f9037383471c92fcb80a3bf4eb6feffffff1d98762a30ec8df56797b2f8b6ff67009ae500c322bf00ca94296f16095ded92010000006a47304402203947c6580071845b5a4b409aef5345d2fc417522be8a5fed4db0fc8e4ba7f60902204d1df9f8382db8edb54b71ed34e89e392247811e584f2395da6f786037ac518101210208da4f932fdd14b319d41daef3638d15c45db7a134952655abd5e333e829d0a5feffffffaee66d0a3f0ae469ab2350245508cd99a7c2cf4f58d25ff70380651a7151ef27000000006a47304402202440dcf86847e41af5b887e20f2e881a26339c57d8214822911f2fb72bf64fe50220523fc8a6b1005b0a2af48a397738f4490ee9871d3d9f2d4f5e4c7014f58f410e0121026942351b3d3e545a8fb7688d89bcfeeaf7646d4284d3096a82484582a5c24f33feffffffd6ddbba9699a600885c48afb8e9d96bbbc911ca1dc6e1b7f819ae67e070974a3310000006b483045022100e8b84ac7b307f8719a84722b3d2b4aa88cd148d9fd7c14ca244490deaed5042d02200f3eb5d3cffb09d5f5482e44e6b24ff034a7fe4a5382bdc9adbb7af0768fd741012103322fbf454b118ef72e08fe99e23362a87c3f58f4b681bdaa263daafc71b5dcdefeffffffa034e9b1724c7c96dd35b7ad8d9eff488969788f318ae1efa263a661e3691905030000006a473044022053c0f41ee5f1a6288ca7abf233932a7219afda09670a771e53daf26eae7cefd902204fd8cb1ce3ecc9b97bd96c2d4d879678bcaae8da922d48796a90f9f7e82e19fd01210334b85bab5fabed94f78b2292528885ce2bc5db2413f2ac86b5a876f41bebc65afeffffff67016aaf9015e22748c959df7b0946564b0a0295e92057305c33335f572bf371000000006b4830450221008f6b55e6f70b4aa6d65cc4ac69851ca9d9f26e7163d72eb99b89e2318e59addb02207d8ddda953c0c47a26c8dcfd0b83752d26d22cd52a9d0b76567c8792501b56d0012103da410ea4d66569240cf5e1dd9c7b7e5112cb62be2da8f49897bbc59acc99518efeffffff6b23b0342ccd5d355d3d5afc096402056048e62c6ed99c98df3197d3ccb6ea8f000000006b483045022100b484779cf8bab806b64a0b5506cefdbd6878d073b857cbb9b1f30e3fcbe467e102203f3afde361511396bd0e4c88b9cae67d3de53ef63c65284528300954299d108e0121036a7776dc183ba2ee329bb91b4222c0ae18394dc81346253679c6021208cf0460feffffff43d65aa4060591c7a93499f159d1acf4487c54670c51f64785b448a92d81d50e010000006b483045022100a2db969235ee3ff48944e2c2f5a3e3d70ce449aff57cc6b103c89392112eaf5702202f9a5eb5da4cba386a990b227ed153345944d1c23faba53c2b6f779f329a8cd601210224b89d2dfb324a240d33ad04491626e8d505c3bd27ae8927c5f5127958e80003feffffffc072a21159510d0e66ce77ac81075a20a5ed0940ab68de084f5d5925128527df2f0000006a4730440220745fe01fa4043c754cad5848ac9895aeb7750a1b716aa5389e49a9eecb41cad502206b36e22f281737a33610891596a2c02d5cf3ce7c9c0578c9c92dd871454621ed012102d4db616c07d94755e7d90d51c6350ba22186e9ba2de1fba50480311e310a06a7feffffff884f7da81d2c88724482cbbeb5bd6ce3eee3084c88f27cd8169268b14777d6d6070000006b483045022100a63a36a57c47c3e3447a765bdafb114cfcc99a7c81b4990eba24b83bb6f92daf022023844de984f6582cd2ad46d58e256210f00957f8aca61f615e2ef2bc476be82b0121027d98d52cd1ace8afbe520058f558d26135f4ace96239a5c87b28d72943530d2dfeffffff32c3327a9e06ee5a447c9d50b2ea38a3c9d85c296713cfaac9f7ac1d7a0051b21d0000006a473044022032f30ded5ba6c5bd47e44de482071e1e892324e5efa9cf02c431b2714caa837702206504a7392cdf2b86fd829c3129f0e8a99f904f1a10b59f6612f1755411ccbdd40121031cfde82317b2eca72c89bc2b7955e261328b529339fd29040fed217e08dd562bfeffffffa0aaac50a1088ba2c6740b5f63a192150a4e06ad9d4a88156612acff967c5793040000006a47304402200fe65f5cec04d51e9d426e62b3caf6aa51494f60977dba6e08de7fc1b9d923c102202fafe3ae9c5e55dfe0658e0465659bead28212a72bd6987a90cd5e3eb2689e9b0121025dccf78ea20ec75b390a9e0526df8c7f851199f3ad88e67381da09cb6a41b974feffffff245e2d05d4804f46f877a541e2be20cc0ea6383dcd88632ee7b23620bd51b096000000006b483045022100e2e960a39700336e29d8e5236ca308e95ee7ccc3d3bb4712a9b9b644d68d07eb02207a9758b5fb627c15e6cdef98f6b506b21235e7b3ecdd2fb431d0f059fffafeb20121037c18fa148e9bcd22d06e33d7f1ccce422068a6a8c7ee197ad6fe48010cf5e1dcfeffffff50eb324c6f86689356e1fe92a9ced7b3ee7c3c5c35966d5072258b48d3393f98000000006b4830450221009c2174d72b9af54bc29e367b1fd1f52e4c581d4a45016d9dd7de042ad71fee26022067b96e33b37f96f8fb728a74dded6de89fc5dd28807ab1845760bf5ba2d6fcda01210229935c3950897258d87531d909d3f5b9f50ca053e85ab992ccd2845ccac539b1feffffff30e36eae0e9ef668aeef915e3e4a43c50d47f9150f0ed45dbe0fb651d3806d34000000006a47304402203a1e8d3911c5a3e6870e18596ea557d2b8d97ae1f235e957aff5e8e34984e7ad022052d22003e3629878a7d3e0a1d9817adfc6479206b1089604618b75ccc25d29c3012102f92a888c0e8d42bbca1576bc1ce51796acb375557640c8a58c03e30674477faafeffffffd498d817e9a7b7410bb4ea02a4cf571900091301e13204e03b6a6adb68dea3d70d0000006b483045022100c9113520c688dd05ecc2c1760270efd2cbb3d3252feb970f8969b899a22e27b50220363ea6e7adc0665a37d699a7c491370a884644aedc7043c0798191dcaccc2707012102c3e94249625e96f7621ee946c802331d779771eb585f1f6478fcad6c628db58ffeffffffdc2e6e67bff88f3054f3510a9aa58c4faafe8f6680eeb9218b79c90601a5d6a6010000006b48304502210098c36805cfb40cb4c7a8a1fda735acaeecea97d7b3004302e6659415856aae4502201e0f30a97c41e8ae31bf1b2579aff28e8d028d3779a4cf8a17068441435a3897012103249c487d8cd4fefda8ada8c394bf903af1a2720bedb0ab8c81902b7d3c0fc8a8feffffff02cde71b00000000001976a914f2763fe4b734fb9340deeed63801940364b96a1a88ace0f8ef18000000001976a9147cdd192406ccc34b305419041a2f9fbc2c6f979688aca9c007000100000002e24e297a5e25c65b9d4af3cacbeb14ae464ffbb827a51dd7b6c9feb67d13e5b6080000006b483045022100fd7fc2d5ce60e3af937ae9265dd7f9df323fa59e8d9684a14b87453102b2390f022043cf3bff1e8cfbe4a14a4b047edd076acb6074bc75219f05699614f6e56d3b84012102db24cf1edcb55a224725ed52d00c305d072b8d543a114e60a15a2f5e615333fbffffffff3f8528132e28f5f266570cefa667ed30ce9e5d550839ae3680714a0f46df81f3010000006b483045022100a60ebbed9dd3a06469ce19ebab30497251cbf9d7ef5c880fedba0297f814edf502203fa2af45f0e8cba63dc2232995263b455722e86f96191d4a1da414c70616d021012102b1e5df07522c609866c468731261225b5241556a5e635c8640c6532dacbc54e8ffffffff0187287f010000000017a91473bbe5580daed52c819362da60d0332b97e1945587000000000100000001ee7332adcb7f3f18307c8d5b7c9aa3b3ab3cd64300a7d7e2c88e1d191ab97e6b0100");
	}

	@Test
	public void testFromBytes() throws Exception {
		
		// TEST VERSION
		BitcoinFrame frameVersion = BitcoinFrame.deserialize(version, 0);
		Assert.assertEquals(frameVersion.getMagic(), MagicVersion.REGTEST);
		Assert.assertEquals(frameVersion.getCommand(), BitcoinCommand.VERSION);
		Assert.assertEquals(frameVersion.getLenght(), 115L);
		Assert.assertEquals(frameVersion.getChecksum(), 126112988L);
		
		BitcoinVersionMessage versionMessage = (BitcoinVersionMessage) frameVersion.getPayload();
		
		Assert.assertEquals(70001, versionMessage.getVersion());
		Assert.assertEquals(new BigInteger("0"), versionMessage.getServices());
		Assert.assertEquals(new BigInteger("1508766685"), versionMessage.getTimestamp());
		Assert.assertEquals(new BigInteger("0"), versionMessage.getNonce());
		Assert.assertEquals("/bitcoinj:0.14.5/UNIQUID:0.1/", versionMessage.getUserAgent());
		Assert.assertEquals(0, versionMessage.getStartHeight());
		Assert.assertEquals(true, versionMessage.getRelay());
		Assert.assertEquals(new NetworkAddress(0, new BigInteger("0"), InetAddress.getByAddress(new byte[] { (byte) 0x7f, (byte) 0x0, (byte) 0x0, (byte) 0x1 }), 19000), versionMessage.getAddressReceiving());
		Assert.assertEquals(new NetworkAddress(0, new BigInteger("0"), InetAddress.getByAddress(new byte[] { (byte) 0x7f, (byte) 0x0, (byte) 0x0, (byte) 0x1 }), 19000), versionMessage.getAddressEmitting());
		Assert.assertArrayEquals(version, BitcoinFrame.serialize(frameVersion));
		
		// TEST VERACK
		BitcoinFrame frameVerack = BitcoinFrame.deserialize(verack, 0);
		Assert.assertEquals(frameVerack.getMagic(), MagicVersion.REGTEST);
		Assert.assertEquals(frameVerack.getCommand(), BitcoinCommand.VERACK);
		Assert.assertEquals(frameVerack.getLenght(), 0);
		Assert.assertEquals(frameVerack.getChecksum(), 1576460514L);
		Assert.assertArrayEquals(verack, BitcoinFrame.serialize(frameVerack));
		
		// TEST PING
		BitcoinFrame framePing = BitcoinFrame.deserialize(ping, 0);
		Assert.assertEquals(framePing.getMagic(), MagicVersion.REGTEST);
		Assert.assertEquals(framePing.getCommand(), BitcoinCommand.PING);
		Assert.assertEquals(framePing.getLenght(), 8);
		Assert.assertEquals(framePing.getChecksum(), 2146950681L);
		
		BitcoinPingMessage pingMessage = (BitcoinPingMessage) framePing.getPayload();
		Assert.assertEquals(new BigInteger("4389619506958574594"), pingMessage.getNonce());
		Assert.assertArrayEquals(ping, BitcoinFrame.serialize(framePing));
		
		// TEST PONG
		BitcoinFrame framePong = BitcoinFrame.deserialize(pong, 0);
		Assert.assertEquals(framePong.getMagic(), MagicVersion.REGTEST);
		Assert.assertEquals(framePong.getCommand(), BitcoinCommand.PONG);
		Assert.assertEquals(framePong.getLenght(), 8);
		Assert.assertEquals(framePong.getChecksum(), 2146950681L);
		
		BitcoinPongMessage pongMessage = (BitcoinPongMessage) framePong.getPayload();
		Assert.assertEquals(new BigInteger("4389619506958574594"), pongMessage.getNonce());
		Assert.assertArrayEquals(pong, BitcoinFrame.serialize(framePong));
		
		// TEST GETADDR
		BitcoinFrame frameGetAddr = BitcoinFrame.deserialize(getAddr, 0);
		Assert.assertEquals(frameGetAddr.getMagic(), MagicVersion.REGTEST);
		Assert.assertEquals(frameGetAddr.getCommand(), BitcoinCommand.GETADDR);
		Assert.assertEquals(frameGetAddr.getLenght(), 0);
		Assert.assertEquals(frameGetAddr.getChecksum(), 1576460514L);
		
		Assert.assertArrayEquals(getAddr, BitcoinFrame.serialize(frameGetAddr));
		
		
		// TEST ADDR
		BitcoinFrame frameAddr = BitcoinFrame.deserialize(addr, 0);
		Assert.assertEquals(frameAddr.getMagic(), MagicVersion.REGTEST);
		Assert.assertEquals(frameAddr.getCommand(), BitcoinCommand.ADDR);
		Assert.assertEquals(frameAddr.getLenght(), 31);
		Assert.assertEquals(frameAddr.getChecksum(), 1886443170L);
		
		BitcoinAddrMessage addrMessage = (BitcoinAddrMessage) frameAddr.getPayload();
		Assert.assertEquals(1, addrMessage.getNetworkAddress().size());
		Assert.assertEquals(new NetworkAddress(1512550122, new BigInteger("13"), InetAddress.getByAddress(new byte[] { (byte) 52, (byte) 243, (byte) 36, (byte) 9 }), 18333), addrMessage.getNetworkAddress().get(0));
		Assert.assertArrayEquals(addr, BitcoinFrame.serialize(frameAddr));
		
		// TEST INV
		BitcoinFrame frameInv = BitcoinFrame.deserialize(inv, 0);
		Assert.assertEquals(frameInv.getMagic(), MagicVersion.REGTEST);
		Assert.assertEquals(frameInv.getCommand(), BitcoinCommand.INV);
		Assert.assertEquals(frameInv.getLenght(), 37);
		Assert.assertEquals(frameInv.getChecksum(), 1479503756L);
		
		BitcoinInvMessage bitcoinInvMessage = (BitcoinInvMessage) frameInv.getPayload();
		Assert.assertEquals(1, bitcoinInvMessage.getInventoryVectors().size());
		Assert.assertEquals(new InventoryVector(Type.MSG_TX, Sha256Hash.wrap("60a310a6de373d91449f0c373908ab871db3cec38087b4c2474629c8795988df")), bitcoinInvMessage.getInventoryVectors().get(0));
		Assert.assertArrayEquals(inv, BitcoinFrame.serialize(frameInv));
		
		// TEST GETHEADERS
		BitcoinFrame frameGetHeaders = BitcoinFrame.deserialize(getHeaders, 0);
		Assert.assertEquals(frameGetHeaders.getMagic(), MagicVersion.REGTEST);
		Assert.assertEquals(frameGetHeaders.getCommand(), BitcoinCommand.GETHEADERS);
		Assert.assertEquals(frameGetHeaders.getLenght(), 1061);
		Assert.assertEquals(frameGetHeaders.getChecksum(), 3929933899L);
		
		BitcoinGetHeadersMessage bitcoinGetHeadersMessage = (BitcoinGetHeadersMessage) frameGetHeaders.getPayload();
		Assert.assertEquals(33, bitcoinGetHeadersMessage.getHash().size());
		Assert.assertEquals(Sha256Hash.wrap("00000000db62ee01af2fe16bcaf3d607f5895d5d12abf21d44d2365aab4d62d9"), bitcoinGetHeadersMessage.getHash().get(0));
		Assert.assertEquals(Sha256Hash.wrap("000000000000055ecaa218091ad37c54ca2d3ca900d55cb33b09738cb7599fb5"), bitcoinGetHeadersMessage.getHash().get(10));
		
		// Remove last 0000
		bitcoinGetHeadersMessage.getHash().remove(32);
		
		Assert.assertArrayEquals(getHeaders, BitcoinFrame.serialize(frameGetHeaders));
		
		// TEST HEADERS
		BitcoinFrame frameHeaders = BitcoinFrame.deserialize(headers, 0);
		Assert.assertEquals(frameHeaders.getMagic(), MagicVersion.REGTEST);
		Assert.assertEquals(frameHeaders.getCommand(), BitcoinCommand.HEADERS);
		Assert.assertEquals(frameHeaders.getLenght(), 163);
		Assert.assertEquals(frameHeaders.getChecksum(), 777834015L);
		
		BitcoinHeadersMessage headersMessage = (BitcoinHeadersMessage) frameHeaders.getPayload();
		
		Assert.assertEquals(2, headersMessage.getHeaders().size());
		Assert.assertEquals(Sha256Hash.wrap("000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943"), headersMessage.getHeaders().get(0).getPrevBlock());
		Assert.assertEquals(Sha256Hash.wrap("00000000b873e79784647a6c82962c70d228557d24a747ea4d1b8bbe878e1206"), headersMessage.getHeaders().get(1).getPrevBlock());
		
		Assert.assertArrayEquals(headers, BitcoinFrame.serialize(frameHeaders));
		
		// TEST GETDATA
		BitcoinFrame frameGetData = BitcoinFrame.deserialize(getData, 0);
		Assert.assertEquals(frameGetData.getMagic(), MagicVersion.REGTEST);
		Assert.assertEquals(frameGetData.getCommand(), BitcoinCommand.GETDATA);
		Assert.assertEquals(frameGetData.getLenght(), 73);
		Assert.assertEquals(frameGetData.getChecksum(), 1761036439L);
		
		BitcoinGetDataMessage getDataMessage = (BitcoinGetDataMessage) frameGetData.getPayload();
		
		Assert.assertEquals(2, getDataMessage.getInventoryVectors().size());
		Assert.assertEquals(new InventoryVector(Type.MSG_BLOCK, Sha256Hash.wrap("1699cc6a30e508b71c63fe5c69362bd0ddd1fc476f9fdefaee1eaef0a22b4da0")), getDataMessage.getInventoryVectors().get(0));
		Assert.assertEquals(new InventoryVector(Type.MSG_BLOCK, Sha256Hash.wrap("227ed129441833bb7279d9ffeeac460539e287309b6c87c15db319d38eef0710")), getDataMessage.getInventoryVectors().get(1));
		
		Assert.assertArrayEquals(getData, BitcoinFrame.serialize(frameGetData));
		
		// TEST BLOCK
//		BitcoinFrame frameBlock = BitcoinFrame.deserialize(block, 0);
//		Assert.assertEquals(frameBlock.getMagic(), MagicVersion.REGTEST);
//		Assert.assertEquals(frameBlock.getCommand(), BitcoinCommand.BLOCK);
//		Assert.assertEquals(frameBlock.getLenght(), 215);
//		Assert.assertEquals(frameBlock.getChecksum(), 2471307018L);
	}

}
